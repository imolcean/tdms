package de.tu_berlin.imolcean.tdm.core.generation.methods;

import de.tu_berlin.imolcean.tdm.api.exceptions.DataGenerationException;
import de.tu_berlin.imolcean.tdm.api.interfaces.generation.method.ColumnAwareGenerationMethod;
import de.tu_berlin.imolcean.tdm.api.interfaces.generation.method.GenerationMethod;
import de.tu_berlin.imolcean.tdm.api.GenerationMethodParamDescription;
import lombok.extern.java.Log;
import schemacrawler.schema.Column;

import javax.script.ScriptEngine;
import javax.script.ScriptException;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@Log
public class FormulaGenerationMethod implements GenerationMethod, ColumnAwareGenerationMethod
{
    private final Column column;
    private final ScriptEngine engine;

    public FormulaGenerationMethod(ScriptEngine engine, Column column)
    {
        this.column = column;
        this.engine = engine;
    }

    public Set<Column> findDependencies(Map<String, Object> params)
    {
        log.fine("Looking for dependencies in formula");

        List<Object> args = parseParams(params);
        String formula = (String) args.get(0);

        Set<Column> dependencies = new HashSet<>();

        for(Column column : column.getParent().getColumns())
        {
            if(formula.contains(placeholder(column)))
            {
                dependencies.add(column);
            }
        }

        log.fine(String.format("Found %s dependencies", dependencies.size()));

        return dependencies;
    }

    public void fillPlaceholders(Map<Column, Object> values)
    {
        log.fine("Filling placeholders in formula");

        for(Column dependency : values.keySet())
        {
            engine.put(placeholder(dependency), values.get(dependency));

            log.fine(String.format("Placeholder '%s' is set to '%s'", placeholder(dependency), values.get(dependency)));
        }
    }

    @Override
    public Object generate(Map<String, Object> params)
    {
        log.fine("Generating a value using a formula");

        List<Object> args = parseParams(params);
        Object val;

        try
        {
            val = engine.eval((String) args.get(0));
        }
        catch(ScriptException e)
        {
            throw new DataGenerationException(e);
        }

        Class<?> columnType = column.getColumnDataType().getTypeMappedClass();

        if(!columnType.isAssignableFrom(val.getClass()))
        {
            throw new DataGenerationException(
                    String.format(
                            "Value generated by the formula evaluation for column '%s' has type %s, %s required",
                            column.getFullName(),
                            val.getClass(),
                            columnType));
        }

        return val;
    }

    @Override
    public List<GenerationMethodParamDescription> getParamDescription()
    {
        return List.of(
                new GenerationMethodParamDescription("formula", String.class, true));
    }

    private String placeholder(Column column)
    {
        return "$" + column.getName();
    }
}
