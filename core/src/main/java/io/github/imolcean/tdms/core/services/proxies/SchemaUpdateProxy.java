package io.github.imolcean.tdms.core.services.proxies;

import io.github.imolcean.tdms.api.DataSourceWrapper;
import io.github.imolcean.tdms.api.dto.SchemaUpdateDataMappingRequest;
import io.github.imolcean.tdms.api.interfaces.updater.SchemaUpdater;
import io.github.imolcean.tdms.core.services.managers.SchemaUpdateImplementationManager;
import org.springframework.stereotype.Service;

import java.nio.file.Path;

@Service
public class SchemaUpdateProxy extends AbstractPublicInterfaceProxy<SchemaUpdater> implements SchemaUpdater
{
    private SchemaUpdateReport report;

    public SchemaUpdateProxy(SchemaUpdateImplementationManager manager)
    {
        super(manager, SchemaUpdater.class);
        this.report = null;
    }

    /**
     * Provides access to the last {@link SchemaUpdateReport} generated by the last initialisation step,
     * if schema update is currently in progress.
     *
     * @return last generated update report
     * @throws IllegalStateException if no schema update is currently in progress
     */
    public SchemaUpdateReport getCurrentUpdateReport()
    {
        if(!isUpdateInProgress())
        {
            throw new IllegalStateException("There is no schema update in progress currently");
        }

        return report;
    }

    @Override
    public void setUpdateDescriptor(Path descriptor)
    {
        getImplementation().setUpdateDescriptor(descriptor);
    }

    @Override
    public boolean isUpdateInProgress()
    {
        return getImplementation().isUpdateInProgress();
    }

    @Override
    public boolean isDataMapped()
    {
        return getImplementation().isDataMapped();
    }

    @Override
    public SchemaUpdater.SchemaUpdateReport initSchemaUpdate(DataSourceWrapper internalDs, DataSourceWrapper tmpDs) throws Exception
    {
        report = getImplementation().initSchemaUpdate(internalDs, tmpDs);

        return report;
    }

    @Override
    public void mapData(SchemaUpdateDataMappingRequest request) throws Exception
    {
        getImplementation().mapData(request);
    }

    @Override
    public void rollbackDataMapping() throws Exception
    {
        getImplementation().rollbackDataMapping();
    }

    @Override
    public void commitSchemaUpdate() throws Exception
    {
        getImplementation().commitSchemaUpdate();
        report = null;
    }

    @Override
    public void cancelSchemaUpdate() throws Exception
    {
        getImplementation().cancelSchemaUpdate();
        report = null;
    }
}
